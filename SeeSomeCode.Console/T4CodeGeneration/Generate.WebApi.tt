<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
	var solutionDir = this.Host.ResolveAssemblyReference("$(SolutionDir)"); //requires hostspecific=true
	var doc = new System.Xml.XmlDocument();
	doc.Load( solutionDir + "SeeModel.xml" );

	string localeIdDefault = doc.DocumentElement.GetAttribute("modelName");
    var modelResources = doc.DocumentElement.SelectNodes("/AppModel/ModelResources//ModelResource");
#>

using System.Collections.Generic;
using System.Net.Http;
using System.Web.Http;
using SeeSomeCode.T4Depends;

<#
    foreach (System.Xml.XmlElement me in modelResources)
    {
		var resourceModelValue = me.Attributes["resourceModel"].Value.Split(':'); // "someresource:prop1,prop2,prop3"
        var resourceModelName = resourceModelValue[0];
        string[] resourceModelProperties = null;
        if (resourceModelValue.Length > 1)
        {
            resourceModelProperties = resourceModelValue[1].Split(',');
        }
        else
        {
            resourceModelProperties = "ResourceModelString".Split(',');
        }

		var resourceName = me.Attributes["resourceName"].Value;
		var nameSpace = me.Attributes["nameSpace"].Value;
		var standardMethods = me.Attributes["standardMethods"].Value;
		var standardMethodsArray = standardMethods.ToUpper().Split(',');
#>
// GENERATED CODE (<#= resourceName #>) - SEE GENERATE.WEBAPI.TT FOR DISCUSSION
namespace <#= nameSpace #>
{
    /// <summary>
    /// REST Resource - <#= resourceName #>
    /// </summary>
	[RoutePrefix("api/<#= resourceName #>")]
    public partial class <#= resourceName #>Controller : BaseApiController<ISeeBusinessLogic>
    {
        public <#= resourceName #>Controller( ISeeBusinessLogic bizLogic ) : base( bizLogic ) { }

<#
	// -------------------------------------------------------------------------------------getall
    if (Array.IndexOf(standardMethodsArray, "GETALL") > -1)
    {
#>
		[Route("")]
		public IEnumerable<<#= resourceModelName #>> GetAll( [FromUri]string filter = "" )
        {
            var resourceModelList = new List<<#= resourceModelName #>>();
            var dm = BizLogic.GetMany( "<#= resourceName #>", filter);
		    foreach (var model in dm)
		    {
                resourceModelList.Add(new <#= resourceModelName #>( model.SampleDomainId, "<#= resourceName #>" ) { 
					ResourceModelString = model.SampleDomainString 
				});
            }
            return resourceModelList;
        }
<#
	} // end of Array.IndexOf(standardMethodsArray, "GETALL") > -1
#>

<#
	// -------------------------------------------------------------------------------------getone
    if (Array.IndexOf(standardMethodsArray, "GETONE") > -1)
    {
#>
		[Route("{id}")]
		public IHttpActionResult GetSingle(int id)
		{
			var domainModel = BizLogic.GetOne( "<#= resourceName #>", id.ToString() );
			if ( domainModel == null )
			{
				return NotFound();
			}
            // todo: implement automapper for this        
			return Ok( new <#= resourceModelName #>( domainModel.SampleDomainId, "<#= resourceName #>" )
			{
                ResourceModelString = domainModel.SampleDomainString
			});
		}
<#
	} // end of Array.IndexOf(standardMethodsArray, "GETONE") > -1
#>

<#
	// -------------------------------------------------------------------------------------post
    if (Array.IndexOf(standardMethodsArray, "POST") > -1)
    {
#>
		[Route("")]
        public HttpResponseMessage Post( [FromBody] <#= resourceModelName #> postValue )
        {
            //DebugMessage("handling post request in controller");
            var domainObject = BizLogic.PostOne("<#= resourceName #>", new SampleDto()
            {
                DomainString = postValue.ResourceModelString
            });
			postValue.SetId(domainObject.SampleDomainId, "<#= resourceName #>");

            return base.MakeResponse( postValue );
        }

		/// <summary>
		/// DebugMessage - will not generate any bits in the assembly
		/// </summary>
		partial void DebugMessage( string debugMessage);

<#
	} // end of Array.IndexOf(standardMethodsArray, "POST") > -1

	// -------------------------------------------------------------------------------------model class
#>

		/// <summary>
		/// <#= resourceModelName #> - resource (view) model
		/// </summary>
		/// <remarks>
		/// Any 
		/// </remarks>
		public class <#= resourceModelName #>
		{
			public int ResourceModelId { get; private set; }
			public IList<WebApiLink> Links { get; private set; }
<#
    foreach ( var resourceProperty in resourceModelProperties )
    {
#>
			[DictionaryElement("<#= resourceProperty #>")]
			public string <#= resourceProperty #> { get; set; }
<#
	}
#>

			// POSTED model uses this constructor
            public <#= resourceModelName #>()
            {
                //
            }
			// when we create the model for a GET...
			public <#= resourceModelName #>( int id, string resourceName )
			{
                this.SetId( id, resourceName );
			}

			// when returning a POSTed model we need to set the key
		    public void SetId( int id, string resourceName )
		    {
                ResourceModelId = id;
		        if (Links == null)
		        {
                    Links = new List<WebApiLink>();
                }
                Links.Add( new WebApiLink( id, resourceName ) );
            }
		}
    }
}

<#
    }
#>